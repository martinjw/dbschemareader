using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;
using DatabaseSchemaReader.CodeGen.CodeFirst;
using DatabaseSchemaReader.DataSchema;


// TODO: pluralize the collection properties and With methods that use them
// TODO: figure out how to properly overload the getlist methods for cao by parent and caoid
// TODO: figure out how to handle nullable parameters for the wither's

namespace DatabaseSchemaReader.CodeGen
{
    public class ClassWriter
    {
        private readonly DatabaseTable _table;
        private readonly ClassBuilder _cb;
        private readonly DataTypeWriter _dataTypeWriter = new DataTypeWriter();
        private DataAnnotationWriter _dataAnnotationWriter;
        private readonly CodeWriterSettings _codeWriterSettings;
        private DatabaseTable _inheritanceTable;
        //private CodeInserter _codeInserter;

        public ClassWriter(DatabaseTable table, CodeWriterSettings codeWriterSettings)
        {
            _codeWriterSettings = codeWriterSettings;
            _table = table;
            _cb = new ClassBuilder();
            //_codeInserter = codeWriterSettings.CodeInserter;
            //if (_codeInserter == null) _codeInserter = new CodeInserter();
        }

        public string Write()
        {
            var codeTarget = _codeWriterSettings.CodeTarget;
            _dataAnnotationWriter = new DataAnnotationWriter(false, _codeWriterSettings);
            var className = _table.NetName;
            if (string.IsNullOrEmpty(className) && _table.DatabaseSchema != null)
            {
                PrepareSchemaNames.Prepare(_table.DatabaseSchema, _codeWriterSettings.Namer);
                className = _table.NetName;
            }
            _dataTypeWriter.CodeTarget = codeTarget;

            _inheritanceTable = _table.FindInheritanceTable();

            _codeWriterSettings.CodeInserter.WriteNamespaces(_table, _cb);

            _cb.AppendLine(@"//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a Tool.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
//
//    Behavior of class members defined in this file may be changed by overriding in a derived class.
// </auto-generated>
//------------------------------------------------------------------------------");

            _cb.AppendLine("");
            if (!string.IsNullOrEmpty(_codeWriterSettings.Namespace))
            {
                _cb.BeginNest("namespace " + _codeWriterSettings.Namespace);
            }

            WriteUsings();
            _cb.AppendLine("");

            var tableOrView = _table is DatabaseView ? "view" : "table";
            var comment = "Class representing the " + _table.Name + " " + tableOrView + ".";
            var classDefinition = "public class " + className;
            if (_inheritanceTable != null)
            {
                classDefinition += " : " + _inheritanceTable.NetName;
            }

            _codeWriterSettings.CodeInserter.WriteTableAnnotations(_table, _cb);

            _cb.AppendXmlSummary(comment);
            _cb.AppendLine($"[Table(\"\\\"{_table.Name}\\\"\")]");
            using (_cb.BeginNest(classDefinition, comment))
            {
                WriteClassMembers(className);
            }

            if (!string.IsNullOrEmpty(_codeWriterSettings.Namespace))
            {
                _cb.EndNest();
            }

            return _cb.ToString();
        }

        private void WriteClassMembers(string className)
        {
            if (_codeWriterSettings.CodeTarget == CodeTarget.PocoRiaServices)
            {
                RiaServicesWriter.WritePrivateConstructor(className, _cb);
            }
            else
            {
                //InitializeCollectionsInConstructor(className);
            }

            _codeWriterSettings.CodeInserter.WriteClassMembers(_table, _cb);

            _cb.AppendLine("#region Primitive Properties");
            if (_inheritanceTable == null)
            {
                WritePrimaryKey();
            }


            foreach (var column in _table.Columns)
            {
                if (column.IsPrimaryKey) continue;
                //if (column.IsForeignKey) continue;
                WriteColumn(column);
            }
            _cb.AppendLine("#endregion");
            _cb.AppendLine("");

            _cb.AppendLine("#region Navigation Properties");
            foreach (var foreignKey in _table.ForeignKeys)
            {
                WriteForeignKey(foreignKey);
            }

            WriteForeignKeyCollections();
            _cb.AppendLine("#endregion");

            _cb.AppendLine("");
            _cb.AppendLine("#region CRUD Methods");
            _cb.AppendLine("public IDbContext DbContext { get; set; }");
            _cb.AppendLine("");
            WriteCreate(className);
            _cb.AppendLine("");
            WriteGetters(className);
            WriteWiths(className);
            _cb.AppendLine("#endregion");
        }

        private IEnumerable<DatabaseColumn> GetInverseForeignKeyReferencedColumns()
        {
            var c = new List<DatabaseColumn>();
            foreach (var ifk in _table.InverseForeignKeys(_table))
            {
                if (ifk.RefersToTable != ifk.TableName)
                {
                    foreach (var rc in ifk.ReferencedColumns(_table.DatabaseSchema))
                    {
                        c.Add(ifk.ReferencedTable(_table.DatabaseSchema).FindColumn(rc));
                    }
                }
                else
                {
                    foreach (var _c in ifk.Columns)
                    {
                        c.Add(ifk.ReferencedTable(_table.DatabaseSchema).FindColumn(_c));
                    }
                }
            }

            return c;
        }

        private IEnumerable<DatabaseColumn> GetForeignKeyColumns()
        {
            var c = new List<DatabaseColumn>();
            foreach (var fk in _table.ForeignKeys)
            {
                if (fk.RefersToTable == fk.TableName)
                {
                    foreach (var rc in fk.ReferencedColumns(_table.DatabaseSchema))
                    {
                        c.Add(_table.FindColumn(rc));
                    }
                }
                else
                {
                    foreach (var _c in fk.Columns)
                    {
                        c.Add(_table.FindColumn(_c));
                    }
                }
            }

            return c;
        }

        private void WriteGetters(string className)
        {
            // Get a list of primary keys
            // Find all combinations of the list
            // Write a GetSingle method for the combination of all primary keys
            // For each other combination, write a GetList method

            var primaryKeyColumns = _table.Columns.Where(c => c.IsPrimaryKey);
            WriteGet(className, primaryKeyColumns);
            _cb.AppendLine("");

            List<IEnumerable<DatabaseColumn>> combinations = null;
            var allKeys = new List<DatabaseColumn>();
            allKeys.AddRange(primaryKeyColumns);
            allKeys.AddRange(GetInverseForeignKeyReferencedColumns());
            allKeys.AddRange(GetForeignKeyColumns());
            for (var i = 1; i <= allKeys.Distinct().Count(); i++)
            {
                if (combinations == null)
                {
                    combinations = new List<IEnumerable<DatabaseColumn>>();
                }

                var c = allKeys.Distinct().DifferentCombinations(i);
                combinations.AddRange(c);
            }

            if (combinations == null)
            {
                return;
            }

            foreach (var c in combinations)
            {
                if (c.SequenceEqual(primaryKeyColumns))
                {
                    continue;
                }

                WriteGetListBys(className, c);
                _cb.AppendLine("");
            }
        }

        private void WriteGetListBys(string className, IEnumerable<DatabaseColumn> columns)
        {
            var methodParameters = new List<Parameter>();
            foreach (var c in columns)
            {
                var pn = _codeWriterSettings.Namer.NameParameter(PropertyName(c));
                var dt = _dataTypeWriter.Write(c);
                var cn = PropertyName(c);
                var fn = Regex.Replace(PropertyName(c), "([A-Z]+|[0-9]+)", " $1", RegexOptions.Compiled).Trim();
                var fields = fn.Split(' ').ToList();
                var firstChar = fields[0].ToLower()[0];
                if (firstChar == 'a' || firstChar == 'e' || firstChar == 'i' || firstChar == 'o' || firstChar == 'u')
                {
                    fields.Insert(0, "An");
                }
                else
                {
                    fields.Insert(0, "A");
                }

                for (var i = 1; i < fields.Count; i++)
                {
                    var f = fields[i];
                    if (f.ToLower() == "id")
                    {
                        fields[i] = "ID";
                        continue;
                    }

                    fields[i] = fields[i].ToLower();
                }

                var summary = string.Join(" ", fields) + ".";

                methodParameters.Add(new Parameter() { Name = pn, DataType = dt, ColumnNameToQueryBy = cn, Summary = summary });
            }

            var signatureParameters = string.Join(", ", methodParameters.Select(mp => $"{mp.DataType} {mp.Name}"));

            var methodName = $"GetListBy{string.Join("And", methodParameters.Select(mp => _codeWriterSettings.Namer.NameColumnAsMethodTitle(mp.ColumnNameToQueryBy)))}";

            var parametersForSummary = new List<Tuple<string, string>>
            {
                new Tuple<string, string>("dbc", "A database context.")
            };

            parametersForSummary.AddRange(methodParameters.Select(mp => new Tuple<string, string>(mp.Name, mp.Summary)));

            _cb.AppendXmlSummary(
                $"Queries the database for each instance whose properties match the specified values.",
                $"A list of instances of <see cref=\"{className}\"/>, or an empty list if there are no matches.",
                $"This method returns shallow instances of <see cref=\"{className}\"/>, i.e., it does not recurse.",
                parametersForSummary
            );

            using (_cb.BeginNest($"public static IEnumerable<{className}> {methodName}(IDbContext dbc, {signatureParameters})"))
            {
                var wc = string.Join(" AND ", methodParameters.Select(mp => $@"\""{mp.ColumnNameToQueryBy}\"" = '{{{mp.Name}}}'"));
                var sq = $@"$""SELECT * FROM \""{_table.Name}\"" WHERE {wc};""";
                _cb.AppendLine($"IEnumerable<{className}> entities;");
                using (_cb.BeginNest("using (var connection = dbc.CreateConnection())"))
                {
                    _cb.AppendLine($"entities = connection.Query<{className}>({sq});");
                }

                _cb.AppendLine("");
                _cb.AppendLine("entities?.ToList().ForEach(e => e.DbContext = dbc);");
                _cb.AppendLine("return entities;");
            }
        }
        
        private void WriteCreate(string className)
        {
            var parametersForSummary = new List<Tuple<string, string>>
            {
                new Tuple<string, string>("dbc", "A database context."),
                new Tuple<string, string>("entity", "An entity to insert.")
            };
            _cb.AppendXmlSummary(
                $"Inserts the specified <see cref=\"{className}\"/> to the database.",
                $"The inserted instance of <see cref=\"{className}\"/> with fully-populated properties.",
                $"This method ignores properties on <see cref=\"{className}\"/> that correspond to columns with auto-generated sequences, and properties whose values are default and corresond to nullable columns with default values.",
                parametersForSummary
            );
            _cb.BeginNest($"public static {className} Create(IDbContext dbc, {className} entity)");
            _cb.AppendLine($"var columnProperties = entity.GetType().GetProperties().Where(p => p.IsDefined(typeof(ColumnAttribute), false));");
            _cb.AppendLine($"var columnNamesToInsert = new List<string>();");
            _cb.AppendLine($"var allColumnNames = new List<string>();");
            _cb.BeginNest($"foreach (var cp in columnProperties)");
            _cb.AppendLine($"var ca = (ColumnAttribute)cp.GetCustomAttribute(typeof(ColumnAttribute));");
            _cb.AppendLine($"allColumnNames.Add(ca.Name);");
            _cb.AppendLine($"var dgaca = (DatabaseGeneratedAttribute)cp.GetCustomAttribute(typeof(DatabaseGeneratedAttribute));");
            _cb.BeginNest($"if (dgaca != null && dgaca.DatabaseGeneratedOption == DatabaseGeneratedOption.Identity)");
            _cb.AppendLine("continue;");
            _cb.EndNest();
            _cb.AppendLine("");
            _cb.BeginNest($"if (dgaca != null && dgaca.DatabaseGeneratedOption == DatabaseGeneratedOption.Computed)");
            _cb.AppendLine($"var defaultValue = cp.PropertyType.IsValueType ? Activator.CreateInstance(cp.PropertyType) : null;");
            _cb.BeginNest($"if (cp.GetValue(entity).Equals(defaultValue))");
            _cb.AppendLine("continue;");
            _cb.EndNest();
            _cb.EndNest();
            _cb.AppendLine("");
            _cb.AppendLine($"columnNamesToInsert.Add(ca.Name);");
            _cb.EndNest();
            _cb.AppendLine("");
            _cb.AppendLine($"var sqlParameterNames = columnNamesToInsert.Select(cn => $\"@{{cn.Trim(\'\"\')}}\");");
            _cb.AppendLine($"var sql = $\"INSERT INTO \\\"Customer\\\" ({{string.Join(\", \", columnNamesToInsert)}}) VALUES ({{string.Join(\", \", sqlParameterNames)}}) RETURNING {{string.Join(\", \", allColumnNames)}};\";");
            _cb.BeginNest($"using (var connection = dbc.CreateConnection())");
            _cb.AppendLine($"var result = connection.Query<{className}>(sql, entity).Single();");
            _cb.AppendLine("return result;");
            _cb.EndNest();
            _cb.EndNest();
        }

        private void WriteGet(string className, IEnumerable<DatabaseColumn> primaryKeyColumns)
        {
            var methodParameters = new List<Parameter>();
            foreach (var column in primaryKeyColumns)
            {
                var pn = _codeWriterSettings.Namer.NameParameter(PropertyName(column));
                var dt = _dataTypeWriter.Write(column);
                var cn = PropertyName(column);
                var fn = Regex.Replace(PropertyName(column), "([A-Z]+|[0-9]+)", " $1", RegexOptions.Compiled).Trim();
                var fields = fn.Split(' ').ToList();
                var firstChar = fields[0].ToLower()[0];
                if (firstChar == 'a' || firstChar == 'e' || firstChar == 'i' || firstChar == 'o' || firstChar == 'u')
                {
                    fields.Insert(0, "An");
                }
                else
                {
                    fields.Insert(0, "A");
                }

                for (var i = 1; i < fields.Count; i++)
                {
                    var f = fields[i];
                    if (f.ToLower() == "id")
                    {
                        fields[i] = "ID";
                        continue;
                    }

                    fields[i] = fields[i].ToLower();
                }

                var summary = string.Join(" ", fields) + ".";

                methodParameters.Add(new Parameter() { Name = pn, DataType = dt, ColumnNameToQueryBy = cn, Summary = summary });
            }

            var signatureParameters = string.Join(", ", methodParameters.Select(mp => $"{mp.DataType} {mp.Name}"));

            var parametersForSummary = new List<Tuple<string, string>>
            {
                new Tuple<string, string>("dbc", "A database context.")
            };

            parametersForSummary.AddRange(methodParameters.Select(mp => new Tuple<string, string>(mp.Name, mp.Summary)));

            _cb.AppendXmlSummary(
                $"Queries the database for a single instance whose properties match the specified values.",
                $"An instance of <see cref=\"{className}\"/>, or <c>null</c> if there is no match.",
                $"This method gets only primitive properties, i.e., only properties that correspond to columns on the database table. No recursion is performed.",
                new List<Tuple<string, string>>()
                {
                                new Tuple<string, string>("ArgumentNullException", "<paramref name=\"filter\"/> is <c>null</c> or empty."),
                                new Tuple<string, string>("InvalidOperationException", "There are multiple matches in the database.")
                },
                parametersForSummary
            );

            using (_cb.BeginNest($"public static {className} Get(IDbContext dbc, {signatureParameters})"))
            {
                var wc = string.Join(" AND ", methodParameters.Select(mp => $@"\""{mp.ColumnNameToQueryBy}\"" = '{{{mp.Name}}}'"));
                var sq = $@"$""SELECT * FROM \""{_table.Name}\"" WHERE {wc};""";

                _cb.AppendLine($"{className} entity;");
                using (_cb.BeginNest("using (var connection = dbc.CreateConnection())"))
                {
                    _cb.AppendLine($"entity = connection.QuerySingleOrDefault<{className}>({sq});");
                }

                _cb.AppendLine("");
                _cb.AppendLine($"entity.DbContext = dbc;");
                _cb.AppendLine("return entity;");
            }
        }

        private void WriteWiths(string className)
        {
            foreach (var foreignKey in _table.ForeignKeys)
            {
                WriteWith(className, foreignKey);
                _cb.AppendLine("");
            }

            foreach (var foreignKey in _table.ForeignKeyChildren)
            {
                WriteWith(className, foreignKey);
                _cb.AppendLine("");
            }
        }

        public void WriteWith(string className, DatabaseTable foreignKeyChild)
        {
            var fks = foreignKeyChild.ForeignKeys.Where(fk => fk.ReferencedTable(_table.DatabaseSchema).Name == _table.Name);
            foreach (var fk in fks)
            {
                var propertyName = _codeWriterSettings.Namer.ForeignKeyCollectionName(_table.Name, foreignKeyChild, fk);
                var dataType = foreignKeyChild.NetName;
                if (fk.Columns.Count != fk.ReferencedColumns(_table.DatabaseSchema).Count())
                {
                    throw new InvalidOperationException("Number of foreign key columns does not match number of columns referenced!");
                }

                var referencedColumns = fk.ReferencedColumns(_table.DatabaseSchema).ToList();
                var methodParameters = new List<Tuple<string, string, string>>();
                for (var i = 0; i < fk.Columns.Count; i++)
                {
                    var refColumn = fk.Columns[i];
                    var column = referencedColumns[i];
                    var actualColumn = _table.Columns.Single(tc => tc.Name == column);
                    var dataTypeForParameter = _dataTypeWriter.Write(actualColumn);
                    methodParameters.Add(new Tuple<string, string, string>(_codeWriterSettings.Namer.NameParameter(refColumn), dataTypeForParameter, refColumn));
                }

                _cb.BeginNest($"public {className} With{propertyName}()");

                var methodCallParameters = new List<string>
                {
                    "this.DbContext"
                };

                foreach (var fkc in fk.Columns)
                {
                    var tc = _table.Columns.Single(_tc => _tc.Name == fkc);
                    var parameter = $"this.{PropertyName(tc)}";
                    if (_dataTypeWriter.Write(tc).EndsWith("?"))
                    {
                        parameter += ".Value";
                    }

                    methodCallParameters.Add(parameter);
                }

                var s = string.Join(", ", methodCallParameters);
                var methodName = $"GetListBy{string.Join("And", methodParameters.Select(mp => _codeWriterSettings.Namer.NameColumnAsMethodTitle(mp.Item3)))}";
                _cb.AppendLine($"this.{propertyName} = {dataType}.{methodName}({s});");
                _cb.AppendLine("return this;");
                _cb.EndNest();
            }
        }

        public void WriteWith(string className, DatabaseConstraint foreignKey)
        {
            var propertyName = _codeWriterSettings.Namer.ForeignKeyName(_table, foreignKey);
            var refTable = foreignKey.ReferencedTable(_table.DatabaseSchema);
            var dataType = refTable.NetName;

            if (foreignKey.Columns.Count != foreignKey.ReferencedColumns(_table.DatabaseSchema).Count())
            {
                throw new InvalidOperationException("Number of foreign key columns does not match number of columns referenced!");
            }
            
            _cb.BeginNest($"public {className} With{propertyName}()");

            var methodCallParameters = new List<string>
            {
                "this.DbContext"
            };

            foreach (var fkc in foreignKey.Columns)
            {
                var tc = _table.Columns.Single(_tc => _tc.Name == fkc);
                var parameter = $"this.{PropertyName(tc)}";
                if (_dataTypeWriter.Write(tc).EndsWith("?"))
                {
                    parameter += ".Value";
                }

                methodCallParameters.Add(parameter);
            }

            var s = string.Join(", ", methodCallParameters);
            _cb.AppendLine($"this.{propertyName} = {dataType}.Get({s});");
            _cb.AppendLine("return this;");
            _cb.EndNest();
        }
        
        private void WritePrimaryKey()
        {
            foreach (var column in _table.Columns.Where(c => c.IsPrimaryKey))
            {
                WriteColumn(column, false);
            }
        }

        private void WriteUsings()
        {
            _cb.AppendLine("using System;");
            _cb.AppendLine("using System.Collections.Generic;");
            _cb.AppendLine("using System.ComponentModel.DataAnnotations;");
            _cb.AppendLine("using System.ComponentModel.DataAnnotations.Schema;");
            _cb.AppendLine("using System.Linq;");
            _cb.AppendLine("using System.Reflection;");

            _cb.AppendLine("");
            _cb.AppendLine("using Dapper;");
            _cb.AppendLine("using PeopleNet.EnterpriseData.DataAccess.Repositories;");
        }

        private void WriteForeignKeyCollections()
        {
            var listType = "IEnumerable<";

            var hasTablePerTypeInheritance =
                (_table.ForeignKeyChildren.Count(fk => _table.IsSharedPrimaryKey(fk)) > 1);

            foreach (var foreignKey in _table.ForeignKeyChildren)
            {
                if (foreignKey.IsManyToManyTable() && _codeWriterSettings.CodeTarget == CodeTarget.PocoEntityCodeFirst)
                {
                    WriteManyToManyCollection(foreignKey);
                    continue;
                }
                if (_table.IsSharedPrimaryKey(foreignKey))
                {
                    if (hasTablePerTypeInheritance)
                        continue;
                    //type and property name are the same
                    _cb.AppendAutomaticProperty(foreignKey.NetName, foreignKey.NetName, true);
                    continue;
                }

                //the other table may have more than one fk pointing at this table
                var fks = _table.InverseForeignKeys(foreignKey);
                foreach (var fk in fks)
                {
                    var propertyName = _codeWriterSettings.Namer.ForeignKeyCollectionName(_table.Name, foreignKey, fk);
                    var dataType = listType + foreignKey.NetName + ">";
                    WriteForeignKeyChild(propertyName, dataType);
                }
            }
        }

        private void WriteForeignKeyChild(string propertyName, string dataType)
        {
            if (_codeWriterSettings.CodeTarget == CodeTarget.PocoRiaServices)
                _cb.AppendLine("[Include]");
            _cb.AppendAutomaticCollectionProperty(dataType, propertyName, false);
        }

        private void WriteManyToManyCollection(DatabaseTable foreignKey)
        {
            //look over the junction table to find the other many-to-many end
            var target = foreignKey.ManyToManyTraversal(_table);
            if (target == null)
            {
                Debug.WriteLine("Can't navigate the many to many relationship for " + _table.Name + " to " + foreignKey.Name);
                return;
            }
            var propertyName = _codeWriterSettings.Namer.NameCollection(target.NetName);
            var dataType = "ICollection<" + target.NetName + ">";
            _cb.AppendAutomaticCollectionProperty(dataType, propertyName, false);

        }

        private void WriteManyToManyInitialize(DatabaseTable foreignKey)
        {
            //look over the junction table to find the other many-to-many end
            var target = foreignKey.ManyToManyTraversal(_table);
            if (target == null)
            {
                return;
            }
            var propertyName = _codeWriterSettings.Namer.NameCollection(target.NetName);
            var dataType = "List<" + target.NetName + ">";
            _cb.AppendLine(propertyName + " = new " + dataType + "();");
        }

        private void InitializeCollectionsInConstructor(string className)
        {
            if (!_table.ForeignKeyChildren.Any()) return;
            using (_cb.BeginNest("public " + className + "()"))
            {
                foreach (var foreignKey in _table.ForeignKeyChildren)
                {
                    if (foreignKey.IsManyToManyTable() && _codeWriterSettings.CodeTarget == CodeTarget.PocoEntityCodeFirst)
                    {
                        WriteManyToManyInitialize(foreignKey);
                        continue;
                    }
                    if (_table.IsSharedPrimaryKey(foreignKey))
                    {
                        continue;
                    }
                    var fks = _table.InverseForeignKeys(foreignKey);
                    foreach (DatabaseConstraint fk in fks)
                    {
                        var propertyName = _codeWriterSettings.Namer.ForeignKeyCollectionName(_table.Name, foreignKey, fk);
                        var dataType = "List<" + foreignKey.NetName + ">";
                        _cb.AppendLine(propertyName + " = new " + dataType + "();");
                    }
                }
            }
            _cb.AppendLine("");
        }

        private void WriteColumn(DatabaseColumn column)
        {
            WriteColumn(column, false);
        }

        private void WriteColumn(DatabaseColumn column, bool notNetName)
        {
            if (column.DbDataType.Contains("geography") || column.DbDataType.Contains("geometry"))
            {
                return;
            }

            var propertyName = PropertyName(column);
            var dataType = _dataTypeWriter.Write(column);

            if (notNetName)
            {
                //in EF, you want a fk Id property
                //must not conflict with entity fk name
                propertyName += "Id";
            }

            _codeWriterSettings.CodeInserter.WriteColumnAnnotations(_table, column, _cb);

            var writeAnnotations = true;
            if (column.IsPrimaryKey &&
                _codeWriterSettings.CodeTarget == CodeTarget.PocoEfCore &&
                _table.PrimaryKey.Columns.Count > 1)
            {
                //EF Core doesn't like [Key] annotations on composite keys
                writeAnnotations = false;
            }
            if (writeAnnotations)
                _dataAnnotationWriter.Write(_cb, column, propertyName);
            //for code first, ordinary properties are non-virtual. 
            var useVirtual = true;
            _cb.AppendAutomaticProperty(dataType, propertyName, useVirtual);
        }

        internal static string PropertyName(DatabaseColumn column)
        {
            var propertyName = column.Name;
            //var propertyName = column.NetName;
            ////in case the netName hasn't been set
            //if (string.IsNullOrEmpty(propertyName)) propertyName = column.Name;
            //// KL: Ensures that property name doesn't match class name
            //if (propertyName == column.Table.NetName)
            //{
            //    propertyName = string.Format("{0}Column", propertyName);
            //}
            //if (column.IsPrimaryKey && column.IsForeignKey)
            //{
            //    //if it's a composite key as well, always write an Id version
            //    var table = column.Table;
            //    if (table != null && table.HasCompositeKey)
            //    {
            //        return propertyName + "Id";
            //    }
            //    //a foreign key will be written, so we need to avoid a collision
            //    var refTable = FindForeignKeyTable(column);
            //    var fkDataType = refTable != null ? refTable.NetName : column.ForeignKeyTableName;
            //    if (fkDataType == propertyName)
            //    {
            //        //in EF, you want a fk Id property
            //        //must not conflict with entity fk name
            //        propertyName += "Id";
            //    }
            //}
            return propertyName;
        }

        private static DatabaseTable FindForeignKeyTable(DatabaseColumn column)
        {
            var refTable = column.ForeignKeyTable;
            if (refTable != null) return refTable;
            //column may be in multiple fks, and the model may be broken
            var table = column.Table;
            if (table == null) return null;
            //find the first foreign key containing this column
            var fk = table.ForeignKeys.FirstOrDefault(c => c.Columns.Contains(column.Name));
            if (fk != null)
            {
                refTable = fk.ReferencedTable(table.DatabaseSchema);
            }
            return refTable;
        }

        private void WriteForeignKey(DatabaseConstraint foreignKey)
        {
            // get the reference table
            var refTable = foreignKey.ReferencedTable(_table.DatabaseSchema);

            //we inherit from it instead (problem with self-joins)
            if (Equals(refTable, _inheritanceTable)) return;

            if (refTable == null)
            {
                //we can't find the foreign key table, so just write the columns
                WriteForeignKeyColumns(foreignKey, "");
                return;
            }

            var propertyName = _codeWriterSettings.Namer.ForeignKeyName(_table, foreignKey);
            var dataType = refTable.NetName;

            _cb.AppendAutomaticProperty(dataType, propertyName);

            if (false && _codeWriterSettings.UseForeignKeyIdProperties)
            {
                WriteForeignKeyColumns(foreignKey, propertyName);
            }
        }

        private void WriteForeignKeyColumns(DatabaseConstraint foreignKey, string propertyName)
        {
            //for code first, we may have to write scalar properties
            //1 if the fk is also a pk
            //2 if they selected use Foreign Key Ids
            foreach (var columnName in foreignKey.Columns)
            {
                var column = _table.FindColumn(columnName);
                if (column == null) continue;
                //primary keys are already been written
                if (!column.IsPrimaryKey)
                {
                    WriteColumn(column, propertyName.Equals(column.NetName));
                }
            }
        }

        private void WriteCompositeKeyClass(string className)
        {
            using (_cb.BeginNest("public class " + className + "Key", ""))
            {
                foreach (var column in _table.Columns.Where(x => x.IsPrimaryKey))
                {
                    WriteColumn(column);
                }

                var overrider = new OverrideWriter(_cb, _table, _codeWriterSettings.Namer);
                overrider.NetName = className + "Key";
                //overrider.AddOverrides();
            }
        }
    }
}
